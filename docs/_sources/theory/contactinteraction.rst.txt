******************************
Theory: Contact Interactions
******************************

A "contact" interaction is simply a direct scattering process between the crystal lattice and some particle that results in the generation of some number of phonons directly. If helpful, one can consider the contact interaction to instantaneously generate phonons, while the anharmonic process involves generation of an "off-shell" phonon that decays anharmonically into two "on-shell" phonons. This language is consistent with high-energy physics concepts. It doesn't make much sense to me personally, since I'm just a lowly condensed matter physicist/chemist, but the language is presented to help others with a different background from my own. To me, the anharmonic interactions mean that the harmonic phonon modes are not true eigenstates of the lattice, potentially making :math:`\textbf{k}` and :math:`s` not good quantum numbers. The scattering interaction creates probability amplitudes for the high energy eigenstates, but we plot them on a :math:`(\textbf{k},\omega)` space, which is no longer the eigenbasis. The excited eigenstates are projected onto this space, which transforms delta functions into broadened peaks (e.g. Lorentzians). If the harmonic phonon modes were eigenstates, then the dynamic structure factor would contain delta-functions because :math:`\textbf{k}` is a quantum number that specifies a distinct state that can be excited by the scattering process. In other words, if :math:`\textbf{k}` is not a quantum number, then the eigenstates are represented as a linear combination of states at different :math:`\textbf{k}` values, which end up looking like broadened Lorentzians a lot of the time. Well, that's a long-winded way of describing that I don't understand the concept of an off-shell phonon with a finite lifetime; to me, the eigenstates are defined by the Hamiltonian and the scattering process creates these directly (and instantly), which may, or may not be, comprised of multiple phonons.

Back to the contact interaction, there may be some confusion from any user with a physical chemistry background because most experiments measuring phonons can only probe scattering processes that generate one phonon (e.g. Raman and FTIR). This limitation manifests because there are selection rules in the photon-lattice interaction which allow the generation of one phonon. For a general interaction, there need not be any selection rules, which allows the creation of multiple phonons for a given scattering event. This can be rationalized by examining an arbitrary scattering interaction given by a momentum transfer, :math:`\textbf{q}`. In this case, the average energy transfer is given by :math:`q^2/2m` (in atomic units). What happens if the average energy transfer is much greater than the highest energy phonon? If only one phonon is allowed to be created, then energy cannot be conserved on average, which is unphysical. So, multiple phonons must be generated. An example of this is in neutron scattering, where multi-phonon generation is quite common, although not always desired since the multiphonon signal appears as a broad background that may obfuscate the measurement of peaks.

The calculation of multi-phonon contact interactions turns out to be relatively easy to write down in a compact way:

:math:`S(\textbf{q}, \omega) = N\sum_{\tau_1, \tau_2} e^{-W_{\tau_1} -W_{\tau_2} + i\textbf{q}\cdot (\textbf{r}_{\tau_1}^\circ - \textbf{r}_{\tau_2}^\circ)} \exp\left[\hat{C}^{F,\textbf{q}}_{\tau_1\tau_2}\right]\delta(\textbf{q})\delta(\omega)`

where :math:`W` is the Debye-Waller factor, :math:`\textbf{q}` is the momentum transfer, :math:`\textbf{r}_\tau^\circ` is the equilibrium position of the atom :math:`\tau` inside the unit cell, :math:`\omega_{sk}` is the frequency of mode s at k-point :math:`\textbf{k}`, :math:`\epsilon_{\tau,s\textbf{k}}` is the phonon eigenvector indexed for atom :math:`\tau`, and :math:`C` is a convolution operation acting on a function to it's right. The function that is being convolved with the function on the right is:

:math:`F_{\tau_1\tau_2}(\textbf{k}, \omega; \textbf{q}) = \sum_s \frac{\hbar (\textbf{q} \cdot \boldsymbol{\epsilon}_{\tau_1 s -\textbf{k}}) (\textbf{q} \cdot \boldsymbol{\epsilon}_{\tau_2 s \textbf{k}})}{2N \sqrt{m_{\tau_1}m_{\tau_2}}\omega_{s \textbf{k}}}  \delta(\omega - \omega_{s\textbf{k}})`

which is a function of the one-phonon properties generated from Phono3py or Phonopy. Since the convolution operation is in the exponent of an exponential function, the way to evaluate it is to expand the exponential into a power series, and successively perform convolutions depending on the order of the term in the power series.

:math:`\exp(C) = \sum_n \frac{C^n}{n!}`

The input directive called ``overtones`` specifies at which order to truncate this expansion. For example if ``overtones: 5`` is set, then the sum will be carried out until ``n=5`` in the above equation. Also, to implement this sum we first Fourier transform the :math:`F` function, and the current function to be convolved, perform a direct element-wise multiplication between the two functions, and Fourier transform back. The reason is that a convolution operation in the original k-space scales as :math:`N^2` where N is the number of elements in each function, whereas fast Fourier transforms scale as :math:`N\log (N)`, providing a significant speed-up for calculations of dense k-meshes.
