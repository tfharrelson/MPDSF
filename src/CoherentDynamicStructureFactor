from phonopy.spectrum.dynamic_structure_factor import DynamicStructureFactor
import numpy as np

class CoherentDynamicStructureFactor(DynamicStructureFactor):
    def __init__(self):
        super()
    def _atomic_phonon_structure_factor(self, Q_cart, atom_index, freq, eigvec):
        symbols = self._primitive.get_chemical_symbols()
        masses = self._primitive.get_masses()
        pos = self._primitive.get_scaled_positions()
        cart_pos = self._primitive.get_positions()
        #        phase = np.exp(-2j * np.pi * np.dot(pos, G))
        mod_phase = np.exp(1j * np.dot(cart_pos[atom_index], Q_cart))
        W = eigvec.reshape(-1, 3)
        val = 0
        #        for i, m in enumerate(masses):
        if self._func_AFF is not None:
            f = self._func_AFF(symbols[atom_index], np.linalg.norm(Q_cart))
        elif self._b is not None:
            f = self._b[symbols[atom_index]]
        else:
            raise RuntimeError
        QW = np.dot(Q_cart, W[atom_index]) * 2 * np.pi
        val += f / np.sqrt(2 * masses[atom_index]) * QW * mod_phase
        val /= np.sqrt(freq)
        return val
